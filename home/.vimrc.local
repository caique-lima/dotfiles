" set term=xterm-256color
set wrap                      " visually wrap lines
set smartindent               " smart indenting
set shiftwidth=4              " default to two spaces
set tabstop=4                 " default to two spaces
set softtabstop=4             " default to two spaces
set shiftround                " always round indentation to shiftwidth
set mouse=                    " disable mouse
set expandtab

"set t_Co=16                   " set vim terminal to 16 color mode
syntax enable
"set t_Co=256
"let g:CSApprox_loaded=0       " disable csapprox
"let g:solarized_termcolors=16 " tell solarized to trust the terminal 16 colors
"let g:solarized_termtrans=1
"let g:solarized_bold=0
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"
"set background=dark
"colorscheme solarized
" color peaksea               " use the solarized colorscheme
colorscheme gruvbox

" highlight ColorColumn ctermbg=gray
let &colorcolumn="80,".join(range(120,999),",")
set cc=80

" setting markdown for md files
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

let g:indent_guides_enable_on_vim_startup = 0 " disable visible guides at indent points
let g:autoclose_vim_commentmode=1       " don't autoclose quotes in vim files
let g:pymode_lint_checker="pep8, pylint, pyflakes, pep257"
let g:pymode_lint_on_write=0

let g:airline_powerline_fonts=1
unlet g:airline_left_sep
unlet g:airline_right_sep

" Decrease indenting for javascript, css and html
autocmd FileType javascript setlocal sw=2 ts=2 sts=2

" Python features

" Increase indenting for python and php
autocmd FileType python,php setlocal sw=4 ts=4 sts=4
let python_highlight_all = 1

let g:pymode_rope=0 " Don't need this right now.
UnBundle 'spf13/vim-preview'

" Setting some helpfull key-bindings for tabbing
"'Mapping ctrl+pgup and ctrl+pgdwn to change tabs inside vim
"" tab navigation like firefox
nnoremap <C-PageUp>   :bprevious<CR>
nnoremap <C-PageDown> :bnext<CR>
nnoremap <C-t>        :enew<CR>
inoremap <C-PageUp>   <Esc>:bprevious<CR>i
inoremap <C-PageDown> <Esc>:bnext<CR>i
inoremap <C-t>        <Esc>:enew<CR>i

" https://github.com/christoomey/vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

nnoremap <silent> <S-Left>  :TmuxNavigateLeft<cr>
nnoremap <silent> <S-Down>  :TmuxNavigateDown<cr>
nnoremap <silent> <S-Up>    :TmuxNavigateUp<cr>
nnoremap <silent> <S-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <S-\\>    :TmuxNavigatePrevious<cr>

" Fast saving
nmap <leader>w :w!<cr>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Disable spellcheck
" setlocal spell!
" set nospell
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
set spell
set spelllang=en_gb,pt
" let g:grammarous#use_vim_spelllang = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
