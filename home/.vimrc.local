set wrap                      " visually wrap lines
set smartindent               " smart indenting
set shiftwidth=2              " default to two spaces
set tabstop=2                 " default to two spaces
set softtabstop=2             " default to two spaces
set shiftround                " always round indentation to shiftwidth
set mouse=                    " disable mouse

"set t_Co=16                   " set vim terminal to 16 color mode
let g:CSApprox_loaded=1       " disable csapprox
"let g:solarized_termcolors=16 " tell solarized to trust the terminal 16 colors
color peaksea               " use the solarized colorscheme
"set background=light          " match light-solarized terminal emulators

let g:autoclose_vim_commentmode=1       " don't autoclose quotes in vim files
let g:pymode_lint_checker="pep8,pylint" " pep8, then pylint. no pyflakes.

let g:airline_powerline_fonts=1
unlet g:airline_left_sep
unlet g:airline_right_sep

" Increase indenting for javascript and python
autocmd FileType javascript,python setlocal sw=4 ts=4 sts=4

let g:pymode_rope=0 " Don't need this right now.
UnBundle 'spf13/vim-preview'

" Setting some helpfull key-bindings for tabbing
"'Mapping ctrl+pgup and ctrl+pgdwn to change tabs inside vim
"" tab navigation like firefox
nnoremap <C-PageUp> :tabprevious<CR>
nnoremap <C-PageDown> :tabnext<CR>
nnoremap <C-t> :tabnew<CR>
inoremap <C-PageUp> <Esc>:tabprevious<CR>i
inoremap <C-PageDown> <Esc>:tabstopnext<CR>i
inoremap <C-t> <Esc>:tabnew<CR>

" Fast saving
nmap <leader>w :w!<cr>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Disable spellcheck
setlocal spell!


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
